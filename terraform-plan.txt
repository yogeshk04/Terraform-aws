Terraform used the selected providers to generate the following  
execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.one will be created
  + resource "aws_eip" "one" {
      + allocation_id             = (known after apply)
      + associate_with_private_ip = "10.0.1.50"
      + association_id            = (known after apply)
      + carrier_ip                = (known after apply)
      + customer_owned_ip         = (known after apply)
      + domain                    = (known after apply)
      + id                        = (known after apply)
      + instance                  = (known after apply)
      + network_border_group      = (known after apply)
      + network_interface         = (known after apply)
      + private_dns               = (known after apply)
      + private_ip                = (known after apply)
      + public_dns                = (known after apply)
      + public_ip                 = (known after apply)
      + public_ipv4_pool          = (known after apply)
      + tags_all                  = (known after apply)
      + vpc                       = true
    }

  # aws_instance.web-ubuntu-server will be created
  + resource "aws_instance" "web-ubuntu-server" {
      + ami                                  = "ami-0567e0d2b4b2169ae"  
      + arn                                  = (known after apply)      
      + associate_public_ip_address          = (known after apply)      
      + availability_zone                    = "us-east-1a"
      + cpu_core_count                       = (known after apply)      
      + cpu_threads_per_core                 = (known after apply)      
      + disable_api_termination              = (known after apply)      
      + ebs_optimized                        = (known after apply)      
      + get_password_data                    = false
      + host_id                              = (known after apply)      
      + id                                   = (known after apply)      
      + instance_initiated_shutdown_behavior = (known after apply)      
      + instance_state                       = (known after apply)      
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)      
      + ipv6_addresses                       = (known after apply)      
      + key_name                             = "EC2Tutorial"
      + monitoring                           = (known after apply)      
      + outpost_arn                          = (known after apply)      
      + password_data                        = (known after apply)      
      + placement_group                      = (known after apply)      
      + placement_partition_number           = (known after apply)      
      + primary_network_interface_id         = (known after apply)      
      + private_dns                          = (known after apply)      
      + private_ip                           = (known after apply)      
      + public_dns                           = (known after apply)      
      + public_ip                            = (known after apply)      
      + secondary_private_ips                = (known after apply)      
      + security_groups                      = (known after apply)      
      + subnet_id                            = (known after apply)      
      + tags                                 = {
          + "Name" = "ubuntu 20.04"
        }
      + tags_all                             = {
          + "Name" = "ubuntu 20.04"
        }
      + tenancy                              = (known after apply)      
      + user_data                            = "6edcc2718444909834835dded96944fa714fcac7"
      + user_data_base64                     = (known after apply)      
      + vpc_security_group_ids               = (known after apply)      

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)       

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = false
          + device_index          = 0
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.org-internet-gateway will be created
  + resource "aws_internet_gateway" "org-internet-gateway" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "Production-IG"
        }
      + tags_all = {
          + "Name" = "Production-IG"
        }
      + vpc_id   = (known after apply)
    }

  # aws_network_interface.web-sever-nic will be created
  + resource "aws_network_interface" "web-sever-nic" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + interface_type     = (known after apply)
      + ipv4_prefix_count  = (known after apply)
      + ipv4_prefixes      = (known after apply)
      + ipv6_address_count = (known after apply)
      + ipv6_addresses     = (known after apply)
      + ipv6_prefix_count  = (known after apply)
      + ipv6_prefixes      = (known after apply)
      + mac_address        = (known after apply)
      + outpost_arn        = (known after apply)
      + owner_id           = (known after apply)
      + private_dns_name   = (known after apply)
      + private_ip         = (known after apply)
      + private_ips        = [
          + "10.0.1.50",
        ]
      + private_ips_count  = (known after apply)
      + security_groups    = (known after apply)
      + source_dest_check  = true
      + subnet_id          = (known after apply)
      + tags_all           = (known after apply)

      + attachment {
          + attachment_id = (known after apply)
          + device_index  = (known after apply)
          + instance      = (known after apply)
        }
    }

  # aws_route_table.org-prod-route-table will be created
  + resource "aws_route_table" "org-prod-route-table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)        
              + instance_id                = ""
              + ipv6_cidr_block            = "::/0"
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)        
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "prod-rt"
        }
      + tags_all         = {
          + "Name" = "prod-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.prod-rta will be created
  + resource "aws_route_table_association" "prod-rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.allow_web will be created
  + resource "aws_security_group" "allow_web" {
      + arn                    = (known after apply)
      + description            = "Allow web inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Http"
              + from_port        = 80
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Https"
              + from_port        = 443
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_web_traffic"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_web"
        }
      + tags_all               = {
          + "Name" = "allow_web"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.private-subnet will be created
  + resource "aws_subnet" "private-subnet" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "prod-private-subnet"
        }
      + tags_all                        = {
          + "Name" = "prod-private-subnet"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.org-prod-vpc will be created
  + resource "aws_vpc" "org-prod-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags_all                         = (known after apply)
    }

Plan: 9 to add, 0 to change, 0 to destroy.